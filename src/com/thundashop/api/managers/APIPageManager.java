package com.thundashop.api.managers;

import com.google.gson.GsonBuilder;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.HashMap;
import com.thundashop.core.common.JsonObject2;
import com.thundashop.core.pagemanager.data.Page;
import com.thundashop.core.common.Settings;
import java.util.List;
import com.thundashop.core.common.Setting;
import java.util.HashMap;
import com.thundashop.core.common.AppConfiguration;

public class APIPageManager {

      private Transporter transport;

      public APIPageManager(Transporter transport){
           this.transport = transport;
      }

     /**
     * Add application to store, this is usually singleton applications<br>
     * A singleton application is not being attached to a page.
     * This is function is deprecated due to new application management system where id is used instead.
     * use addApplicationBySettingsId instead.
     * @param appName
     * @return AppConfiguration
     * @throws ErrorException 
     */

     public AppConfiguration addApplication(String appName)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("appName",new Gson().toJson(appName));
          data.method = "addApplication";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<AppConfiguration>() {}.getType();
          AppConfiguration object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Same as add application just by using its id.
     * @param id
     * @return AppConfiguration
     * @throws ErrorException 
     */

     public AppConfiguration addApplicationBySettingsId(String id)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("id",new Gson().toJson(id));
          data.method = "addApplicationBySettingsId";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<AppConfiguration>() {}.getType();
          AppConfiguration object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Add an application to a given page area.
     * This is function is deprecated due to new application management system where id is used instead.
     * Use addApplicationToPageBySettingsId instead.
     * @param pageId The id of the page to add it to.
     * @param applicationName The name of the application to add.
     * @param pageArea The area to attach it to on the page. ("header","left","middle","right","footer")
     * @return AppConfiguration
     * @throws ErrorException 
     */

     public AppConfiguration addApplicationToPage(String pageId, String applicationName, String pageArea)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("pageId",new Gson().toJson(pageId));
          data.args.put("applicationName",new Gson().toJson(applicationName));
          data.args.put("pageArea",new Gson().toJson(pageArea));
          data.method = "addApplicationToPage";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<AppConfiguration>() {}.getType();
          AppConfiguration object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * If you know the id of the application you want to add, we strongly recommend to use this call.
     * This function 
     * @param pageId The id of the page to add the application to
     * @param settingsId The settings id which identify what applications is being added.
     * @param pageArea The area this application should be added to.
     * @return AppConfiguration
     * @throws ErrorException 
     */

     public AppConfiguration addApplicationToPageBySettingsId(String pageId, String settingsId, String pageArea)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("pageId",new Gson().toJson(pageId));
          data.args.put("settingsId",new Gson().toJson(settingsId));
          data.args.put("pageArea",new Gson().toJson(pageArea));
          data.method = "addApplicationToPageBySettingsId";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<AppConfiguration>() {}.getType();
          AppConfiguration object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Add an existing application to the application area
     * 
     * @param pageId
     * @param appId
     * @param area
     * @throws ErrorException 
     */

     public void addExistingApplicationToPageArea(String pageId, String appId, String area)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("pageId",new Gson().toJson(pageId));
          data.args.put("appId",new Gson().toJson(appId));
          data.args.put("area",new Gson().toJson(area));
          data.method = "addExistingApplicationToPageArea";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
     }

     /**
     * Change the page layout<br>
     * HeaderFooterLeftMiddleRight = 1<br>
     * HeaderLeftMiddleFooter = 2<br>
     * HeaderRightMiddleFooter = 3<br>
     * HeaderMiddleFooter = 4<br>
     * 
     * @param pageId
     * @param layout
     * @throws ErrorException 
     */

     public void changePageLayout(String pageId, int layout)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("pageId",new Gson().toJson(pageId));
          data.args.put("layout",new Gson().toJson(layout));
          data.method = "changePageLayout";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
     }

     /**
     * Change the userlevel for a given page. Make it accessible for only administrators / editors / customers.<br>
     * Everyone with a higher userlevel will allways gain access to the userlevels below.
     * @param pageId The id of the page to change.
     * @param userLevel The userlevel to set ADMINISTRATOR = 100, EDITOR = 50, CUSTOMER = 10
     * @return Page
     * @throws ErrorException 
     */

     public Page changePageUserLevel(String pageId, int userLevel)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("pageId",new Gson().toJson(pageId));
          data.args.put("userLevel",new Gson().toJson(userLevel));
          data.method = "changePageUserLevel";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<Page>() {}.getType();
          Page object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Create a new page.
     * This page can be used to stick applications to it.
     * 
     * Layout parameters<br>
     * Header footer left middle right = 1;<br>
     * Header left middle footer = 2;<br>
     * Header right middle footer = 3;<br>
     * Header middle footer = 4;<br>
     * 
     * @param layout See above, integer 1 to 4
     * @param parentId The parent page. From what page are this page being created?
     * @return Page
     * @throws ErrorException 
     */

     public Page createPage(int layout, String parentId)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("layout",new Gson().toJson(layout));
          data.args.put("parentId",new Gson().toJson(parentId));
          data.method = "createPage";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<Page>() {}.getType();
          Page object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Create a new page with the specified id.
     * For layouts available, see layouts for createPage function
     * 
     * @param id
     * @return Page
     */

     public Page createPageWithId(int layout, String parentId, String id)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("layout",new Gson().toJson(layout));
          data.args.put("parentId",new Gson().toJson(parentId));
          data.args.put("id",new Gson().toJson(id));
          data.method = "createPageWithId";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<Page>() {}.getType();
          Page object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Delete an application from the store
     * removes all references where it has been used.
     * 
     * Suitable for singleton applications
     * 
     * @param id
     * @throws ErrorException 
     */

     public void deleteApplication(String id)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("id",new Gson().toJson(id));
          data.method = "deleteApplication";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
     }

     /**
     * Delete the page with the id.
     * 
     * @param id 
     */

     public void deletePage(String id)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("id",new Gson().toJson(id));
          data.method = "deletePage";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
     }

     /**
     * Fetch all settings for a given application
     * @param name The php equivelent name of the application.
     * @return HashMap<String,Setting>
     * @throws ErrorException 
     */

     public HashMap<String,Setting> getApplicationSettings(String name)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("name",new Gson().toJson(name));
          data.method = "getApplicationSettings";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<HashMap<String,Setting>>() {}.getType();
          HashMap<String,Setting> object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Get all applications from the applicationPool.
     * 
     * @return List<AppConfiguration>
     */

     public List<AppConfiguration> getApplications()  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.method = "getApplications";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<List<AppConfiguration>>() {}.getType();
          List<AppConfiguration> object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * fetch an existing page.
     * @param id The id for the page to fetch.
     * @return Page
     * @throws ErrorException 
     */

     public Page getPage(String id)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("id",new Gson().toJson(id));
          data.method = "getPage";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<Page>() {}.getType();
          Page object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Fetch a list of all pages found for a list of applications.<br>
     * The key is the application id, the list combined with the key a list of page ids found for the specified applications.
     * @param appIds A list of application ids to resolve pages for.
     * @throws ErrorException 
     */

     public HashMap<String,List<String>> getPagesForApplications(List<String> appIds)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("appIds",new Gson().toJson(appIds));
          data.method = "getPagesForApplications";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<HashMap<String,List<String>>>() {}.getType();
          HashMap<String,List<String>> object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Fetch all settings for a given application
     * @param name The php equivelent name of the application.
     * @return HashMap<String,Setting>
     * @throws ErrorException 
     */

     public HashMap<String,Setting> getSecuredSettings(String appName)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("appName",new Gson().toJson(appName));
          data.method = "getSecuredSettings";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<HashMap<String,Setting>>() {}.getType();
          HashMap<String,Setting> object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Remove an application
     * 
     * @param applicationId The id to the application.
     * @return Page
     * @throws ErrorException 
     */

     public Page removeApplication(String applicationId, String pageid)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("applicationId",new Gson().toJson(applicationId));
          data.args.put("pageid",new Gson().toJson(pageid));
          data.method = "removeApplication";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<Page>() {}.getType();
          Page object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Rearrange a given application for a given page.
     * @param pageId The id of the page where the application is located.
     * @param appId The id of application id to rearrange.
     * @param moveUp If set to true the application is moved up, otherwhise it is set to false.
     * @return Page
     * @throws ErrorException 
     */

     public Page reorderApplication(String pageId, String appId, Boolean moveUp)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("pageId",new Gson().toJson(pageId));
          data.args.put("appId",new Gson().toJson(appId));
          data.args.put("moveUp",new Gson().toJson(moveUp));
          data.method = "reorderApplication";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<Page>() {}.getType();
          Page object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * For each instance of the application, there is an configuration object attached.<br>
     * Modify this object to set an application sticky, inheritable etc.
     * @param config The appconfiguration object to update / save.
     * @throws ErrorException 
     */

     public void saveApplicationConfiguration(AppConfiguration config)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("config",new Gson().toJson(config));
          data.method = "saveApplicationConfiguration";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
     }

     /**
     * Set a given set of settings to a given application.
     * @param appName The php equivelant name of the application.
     * @param settings The settings for the application.
     * @throws ErrorException 
     */

     public void setApplicationSettings(Settings settings)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("settings",new Gson().toJson(settings));
          data.method = "setApplicationSettings";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
     }

     /**
     * Stick an application. This means that the application will be visible on all the pages.<br>
     * This is especially useful for top menu application, footer applications, and other application<br>
     * that is supposed to be displayed all the time.
     * <br>
     * <br> 1 = sticked
     * <br> 0 = not sticked
     * @param appId The id of the application to stick.
     * @param toggle True makes the application sticky, false disabled the stickyness.
     * @throws ErrorException 
     */

     public void setApplicationSticky(String appId, int toggle)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("appId",new Gson().toJson(appId));
          data.args.put("toggle",new Gson().toJson(toggle));
          data.method = "setApplicationSticky";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
     }

     /**
     * Update a page and give it a parent page. <br>
     * This is used to figure out a hiarcy for the menues.<br>
     * @param pageId The page to have a parent page.
     * @param parentPageId The id of the page to be set as the parent page.
     * @throws ErrorException 
     */

     public void setParentPage(String pageId, String parentPageId)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("pageId",new Gson().toJson(pageId));
          data.args.put("parentPageId",new Gson().toJson(parentPageId));
          data.method = "setParentPage";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
     }

     /**
     * Need to translate a set of page ids?
     * @param pages A list (array) of page ids to translate.
     * @return HashMap<String,String>
     * @throws ErrorException 
     */

     public HashMap<String,String> translatePages(List<String> pages)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("pages",new Gson().toJson(pages));
          data.method = "translatePages";
          data.interfaceName = "core.pagemanager.IPageManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<HashMap<String,String>>() {}.getType();
          HashMap<String,String> object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

}
