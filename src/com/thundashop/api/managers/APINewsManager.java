package com.thundashop.api.managers;

import com.google.gson.GsonBuilder;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.HashMap;
import com.thundashop.core.common.JsonObject2;
import java.util.List;
import com.thundashop.app.newsmanager.data.NewsEntry;
import com.thundashop.app.newsmanager.data.MailSubscription;

public class APINewsManager {

      private Transporter transport;

      public APINewsManager(Transporter transport){
           this.transport = transport;
      }

     /**
     * Add a new news entry.
     * @param news The news object to add.
     * @return String
     * @throws ErrorException 
     */

     public String addNews(String news)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("news",new Gson().toJson(news));
          data.method = "addNews";
          data.interfaceName = "app.news.INewsManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<String>() {}.getType();
          String object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Add a subscriber.
     * Whenever a new news is updated to this, the subscribe will get an email.
     * @param email The email address for the subscriber.
     * @return MailSubscription
     * @throws ErrorException 
     */

     public MailSubscription addSubscriber(String email)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("email",new Gson().toJson(email));
          data.method = "addSubscriber";
          data.interfaceName = "app.news.INewsManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<MailSubscription>() {}.getType();
          MailSubscription object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Delete a given news id.
     * @param id The id for the news to delete.
     * @throws ErrorException 
     */

     public void deleteNews(String id)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("id",new Gson().toJson(id));
          data.method = "deleteNews";
          data.interfaceName = "app.news.INewsManager";
          String result = transport.send(data);
     }

     /**
     * Fetch all news added.
     * @return List<NewsEntry>
     * @throws ErrorException 
     */

     public List<NewsEntry> getAllNews()  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.method = "getAllNews";
          data.interfaceName = "app.news.INewsManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<List<NewsEntry>>() {}.getType();
          List<NewsEntry> object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Get all subscribers.
     * @return List<MailSubscription>
     * @throws ErrorException 
     */

     public List<MailSubscription> getAllSubscribers()  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.method = "getAllSubscribers";
          data.interfaceName = "app.news.INewsManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<List<MailSubscription>>() {}.getType();
          List<MailSubscription> object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Remove an existing subscriber.
     * @param subscriberId The subscribers id found in the MailSubscriber object.
     * @return void
     * @throws ErrorException 
     */

     public void removeSubscriber(String subscriberId)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("subscriberId",new Gson().toJson(subscriberId));
          data.method = "removeSubscriber";
          data.interfaceName = "app.news.INewsManager";
          String result = transport.send(data);
     }

}
