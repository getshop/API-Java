package com.thundashop.api.managers;

import com.google.gson.GsonBuilder;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.HashMap;
import com.thundashop.core.common.JsonObject2;
import com.thundashop.core.reportingmanager.data.OrderCreated;
import com.thundashop.core.reportingmanager.data.LoggedOnUser;
import com.thundashop.core.reportingmanager.data.Report;
import com.thundashop.core.reportingmanager.data.PageView;
import com.thundashop.core.reportingmanager.data.ReportFilter;
import java.util.List;
import com.thundashop.core.reportingmanager.data.ProductViewed;
import com.thundashop.core.reportingmanager.data.EventLog;
import com.thundashop.core.reportingmanager.data.UserConnected;

public class APIReportingManager {

      private Transporter transport;

      public APIReportingManager(Transporter transport){
           this.transport = transport;
      }

     /**
     * Fetch all activity data for a given session at a given period in time.
     * @param startDate "yyyy-mm-dd"
     * @param stopDate "yyyy-mm-dd"
     * @param searchSessionId The id of the session to fetch data from.
     * @return List<EventLog>
     * @throws ErrorException 
     */

     public List<EventLog> getAllEventsFromSession(String startDate, String stopDate, String searchSessionId)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("startDate",new Gson().toJson(startDate));
          data.args.put("stopDate",new Gson().toJson(stopDate));
          data.args.put("searchSessionId",new Gson().toJson(searchSessionId));
          data.method = "getAllEventsFromSession";
          data.interfaceName = "core.reportingmanager.IReportingManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<List<EventLog>>() {}.getType();
          List<EventLog> object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Fetch all users which connected at a given time period.
     * These are users who has been logging on to your store.
     * @param startdate "yyyy-mm-dd"
     * @param stopDate "yyyy-mm-dd"
     * @param filter A report filter if you want to filter out more information, use null to avoid the filter.
     * @return List<UserConnected>
     * @throws ErrorException 
     */

     public List<UserConnected> getConnectedUsers(String startdate, String stopDate, ReportFilter filter)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("startdate",new Gson().toJson(startdate));
          data.args.put("stopDate",new Gson().toJson(stopDate));
          data.args.put("filter",new Gson().toJson(filter));
          data.method = "getConnectedUsers";
          data.interfaceName = "core.reportingmanager.IReportingManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<List<UserConnected>>() {}.getType();
          List<UserConnected> object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * List all orders created at a given time period.
     * @param startDate "yyyy-mm-dd"
     * @param stopDate "yyyy-mm-dd"
     * @return List<OrderCreated>
     * @throws ErrorException 
     */

     public List<OrderCreated> getOrdersCreated(String startDate, String stopDate)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("startDate",new Gson().toJson(startDate));
          data.args.put("stopDate",new Gson().toJson(stopDate));
          data.method = "getOrdersCreated";
          data.interfaceName = "core.reportingmanager.IReportingManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<List<OrderCreated>>() {}.getType();
          List<OrderCreated> object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Fetch the page id for all page 
     * @param startDate "yyyy-mm-dd"
     * @param stopDate "yyyy-mm-dd"
     * @return List<PageView>
     * @throws ErrorException 
     */

     public List<PageView> getPageViews(String startDate, String stopDate)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("startDate",new Gson().toJson(startDate));
          data.args.put("stopDate",new Gson().toJson(stopDate));
          data.method = "getPageViews";
          data.interfaceName = "core.reportingmanager.IReportingManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<List<PageView>>() {}.getType();
          List<PageView> object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Fetch all viewed product for a given time period.
     * @param startDate "yyyy-mm-dd"
     * @param stopDate "yyyy-mm-dd"
     * @return List<ProductViewed>
     * @throws ErrorException 
     */

     public List<ProductViewed> getProductViewed(String startDate, String stopDate)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("startDate",new Gson().toJson(startDate));
          data.args.put("stopDate",new Gson().toJson(stopDate));
          data.method = "getProductViewed";
          data.interfaceName = "core.reportingmanager.IReportingManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<List<ProductViewed>>() {}.getType();
          List<ProductViewed> object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Fetch a report for a given time period.
     * @param startDate "yyyy-mm-dd"
     * @param stopDate "yyyy-mm-dd"
     * @param type 0, hourly, 1. daily, 2. weekly, 3. monthly
     * @return List<Report>
     * @throws ErrorException 
     */

     public List<Report> getReport(String startDate, String stopDate, int type)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("startDate",new Gson().toJson(startDate));
          data.args.put("stopDate",new Gson().toJson(stopDate));
          data.args.put("type",new Gson().toJson(type));
          data.method = "getReport";
          data.interfaceName = "core.reportingmanager.IReportingManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<List<Report>>() {}.getType();
          List<Report> object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Fetch a list of all users trying / logging on at a given time interval.
     * @param startDate "yyyy-mm-dd"
     * @param stopDate "yyyy-mm-dd"
     * @return List<LoggedOnUser>
     * @throws ErrorException 
     */

     public List<LoggedOnUser> getUserLoggedOn(String startDate, String stopDate)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("startDate",new Gson().toJson(startDate));
          data.args.put("stopDate",new Gson().toJson(stopDate));
          data.method = "getUserLoggedOn";
          data.interfaceName = "core.reportingmanager.IReportingManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<List<LoggedOnUser>>() {}.getType();
          List<LoggedOnUser> object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

}
