package com.thundashop.api.managers;

import com.google.gson.GsonBuilder;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.HashMap;
import com.thundashop.core.common.JsonObject2;
import java.util.ArrayList;
import java.util.List;
import com.thundashop.core.ordermanager.data.Order;
import com.thundashop.core.cartmanager.data.Cart;

public class APIOrderManager {

      private Transporter transport;

      public APIOrderManager(Transporter transport){
           this.transport = transport;
      }

     /**
     * Create an order out of a given cart.
     * @param cart The cart object generated by cartmanager.
     * @return Order
     * @throws ErrorException 
     */

     public Order createOrder(Cart cart)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("cart",new Gson().toJson(cart));
          data.method = "createOrder";
          data.interfaceName = "core.ordermanager.IOrderManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<Order>() {}.getType();
          Order object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Get a list of already created orders.
     * @param orderIds A list of all orders you want to fetch, all orders are retrieved if this list is empty.
     * @param page What page are you fetching (default 0)
     * @param pageSize Number of entries for each page (default 10)
     * @return List<Order>
     * @throws ErrorException 
     */

     public List<Order> getOrders(ArrayList<String> orderIds, Integer page, Integer pageSize)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("orderIds",new Gson().toJson(orderIds));
          data.args.put("page",new Gson().toJson(page));
          data.args.put("pageSize",new Gson().toJson(pageSize));
          data.method = "getOrders";
          data.interfaceName = "core.ordermanager.IOrderManager";
          String result = transport.send(data);
          Gson gson = new GsonBuilder().serializeNulls().create();
          Type typeJson_3323322222_autogenerated = new TypeToken<List<Order>>() {}.getType();
          List<Order> object = gson.fromJson(result, typeJson_3323322222_autogenerated);
          return object;
     }

     /**
     * Update or modify an existing order. 
     * @param order The order to modify
     * @return void
     * @throws ErrorException 
     */

     public void saveOrder(Order order)  throws Exception  {
          JsonObject2 data = new JsonObject2();
          data.args = new HashMap();
          data.args.put("order",new Gson().toJson(order));
          data.method = "saveOrder";
          data.interfaceName = "core.ordermanager.IOrderManager";
          String result = transport.send(data);
     }

}
